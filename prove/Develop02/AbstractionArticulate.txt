Abstraction is the action of breaking something like an idea down into simpler parts. This principle is beneficial for many reasons. It can make large and complex processes easier to handle by breaking them down into bite sized tasks. When programming, one way we can employ the principle of abstraction is through the creation of classes. Classes help us divide a large and complex program into smaller chunks that will eventually work together. It is a lot easier to focus on one of these classes at a time. Each class typically represents one process or area of the program. One example of abstraction from my recent journal program is the creation of an Entry class and Journal class. I knew that my journal was going to have to handle a lot of different entries, and handling all of these at once would be complicated. I created my Entry class and focused on what one individual entry would need. I got it to store the date, prompt, and response as well as the function that would display the entry to the console. I then created my Journal class to store all of the entries and when it came time to display entries, I had my Journal class run the display function for each entry. The creation and completion of the Entry class made complicated Journal class so much easier.